I"6<p><em>모든 내용은 MacOS Catalina 기준으로 작성되었습니다</em></p>

<h2 id="프로젝트-셋업하기">프로젝트 셋업하기</h2>

<h2 id="1-프로젝트-생성">1. 프로젝트 생성</h2>

<ul>
  <li>Github에서 Repository 만들기</li>
  <li>.gitignore: Node</li>
  <li>yarn init 혹은 npm init 한뒤 Git 연동.</li>
</ul>

<h2 id="2-graphql-서버-구축을-위한-라이브러리-설치">2. GraphQL 서버 구축을 위한 라이브러리 설치</h2>

<ul>
  <li>
    <p>graphql-yoga</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add graphql-yoga
</code></pre></div>    </div>
  </li>
  <li>
    <p>nodemon -D (src/server.js에 있는 코드를 실행하는 script를 작성하는데 필요합니다.)</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add nodemon -D
</code></pre></div>    </div>
  </li>
  <li>
    <p>babel-cli -D</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add babel-cli -D
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="3-serverjs-생성">3. server.js 생성</h2>

<ul>
  <li>src 폴더 내부에 server.js 파일을 생성합니다.</li>
</ul>

<h2 id="4-packagejson-수정">4. package.json 수정</h2>

<ul>
  <li>main: index.js 제거</li>
  <li>
    <p>yarn dev를 실행하면 nodemon –exec babel-node src/server.js를 실행하게 합니다</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span> <span class="p">:</span> <span class="p">{</span>
<span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">nodemon --exec babel-node src/server.js</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>nodemon을 실행할 때마다 babel-node로 src폴더의 server.js 파일을 실행하게 됩니다.</li>
  <li>nodemon은 저장할 때마다 실행을 해주는 도구입니다. 서버를 껐다가 킬 필요가 없어지게 해주는 도구입니다.</li>
  <li>babel은 코드를 호환성 있게 만들어줍니다.</li>
  <li>
    <p>.babelrc 파일을 만든뒤 node가 import를 인식할 수 있도록 아래와 같은 코드를 입력합니다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
<span class="dl">"</span><span class="s2">presets</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">@babel/preset-env</span><span class="dl">"</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>@babel/node와 @babel/preset-env, @babel/core를 설치하여 babel을 세팅합니다.</li>
</ul>

<h2 id="5-환경변수-설정하기">5. 환경변수 설정하기</h2>

<p>로컬서버를 사용하기위한 PORT와 같은 환경변수를 설정해주는 작업을 해야합니다. 이러한 환경변수들은 따로 .env파일을 통해 관리합니다.</p>

<ul>
  <li>
    <p>.env파일을 src 폴더에 만든 뒤 설정할 포트 PORT = 4000을 선언합니다. 모든 환경변수들은 .env에 선언하는 것이 좋습니다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">PORT</span> <span class="o">=</span> <span class="mi">4000</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>server.js에서 PORT 변수를 만듭니다.</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">dotenv</span><span class="dl">"</span><span class="p">).</span><span class="nx">config</span><span class="p">()</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">4000</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>이때, .config()에서 아무것도 입력하지 않은 경우에는 .env 파일로 인식하여 실제 .env파일에는 아무내용도 입력하지 않는 것 같습니다.</p>

<h2 id="6-typedefs-resolvers-만들기">6. typeDefs, Resolvers 만들기</h2>

<p>서버를 만들기 위해서는 query를 생성해야하는데, query를 생성하기 위해서는 typeDefs과 Resolvers가 필요합니다.
그 Type과 Resolvers를 Server.js안에 우선 만들어보도록 하겠습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//typeDefs</span>
<span class="kd">const</span> <span class="nx">typeDefs</span> <span class="o">=</span> <span class="s2">`type Query{ hello : String! }`</span>
<span class="c1">//resolvers</span>
<span class="kd">const</span> <span class="nx">resolvers</span> <span class="o">=</span> <span class="p">{</span>
<span class="na">Query</span> <span class="p">:</span> <span class="p">{</span>
<span class="na">hello</span> <span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span>
<span class="p">}</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphQLServer</span><span class="p">({</span><span class="nx">typeDefs</span><span class="p">,</span><span class="nx">resolvers</span><span class="p">});</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span><span class="na">port</span> <span class="p">:</span> <span class="nx">PORT</span><span class="p">},</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`server is running http://localhost:</span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="7-마무리">7. 마무리</h2>

<p>yarn dev를 하면 server is running http://localhost:4000 라는 메시지가 뜨며 서버가 동작합니다.</p>

<h2 id="이슈">이슈</h2>

<p>Requires Babel “^7.0.0-0”, but was loaded with “6.26.3”.<br />
If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version.</p>

<p>에러 발생. -&gt; yarn global remove babel-cli로 해결</p>
:ET