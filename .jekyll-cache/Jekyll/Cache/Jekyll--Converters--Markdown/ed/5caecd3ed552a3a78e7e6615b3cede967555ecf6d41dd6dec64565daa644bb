I"5"<p><em>모든 내용은 MacOS Catalina 기준으로 작성되었습니다</em></p>

<h3 id="1-morgan-설치하기">1. morgan 설치하기</h3>

<ul>
  <li>logging module인 morgan을 추가합니다.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add morgan
</code></pre></div></div>

<ul>
  <li>server.js에 morgan을 추가합니다.</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">logger</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">morgan</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">express</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">logger</span><span class="p">(</span><span class="dl">"</span><span class="s2">dev</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div>

<ul>
  <li>morgan을 추가하면 console에 다음과 같이 실시간으로 포트가 출력됩니다.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">POST</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">121</span><span class="p">.</span><span class="mo">032</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">25787</span>
<span class="n">POST</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">22</span><span class="p">.</span><span class="mi">315</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">25787</span>
<span class="n">GET</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">0</span><span class="p">.</span><span class="mi">159</span> <span class="n">ms</span> <span class="o">-</span> <span class="o">-</span>
<span class="n">POST</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">17</span><span class="p">.</span><span class="mi">741</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">25787</span>
<span class="n">POST</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">7</span><span class="p">.</span><span class="mi">500</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">25786</span>
<span class="n">POST</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">6</span><span class="p">.</span><span class="mi">661</span> <span class="n">ms</span> <span class="o">-</span> <span class="mi">25786</span>
<span class="n">GET</span> <span class="o">/</span> <span class="mi">200</span> <span class="mi">0</span><span class="p">.</span><span class="mi">104</span> <span class="n">ms</span> <span class="o">-</span> <span class="o">-</span>
</code></pre></div></div>

<p>morgan은 logging module 인데, graphql 서버에는 express 서버가 내장되어 있습니다.</p>

<p>이때 모든 파일은 schema.js에서 합칩니다. api폴더에 필요한 graphql, resolvers파일을 계속 추가하여 구조를 만들겁니다.</p>

<h3 id="2-merge-에-필요한-라이브러리-설치">2. merge 에 필요한 라이브러리 설치</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add graphql-tools merge-graphql-schemas
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">path</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">makeExecutableSchema</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">graphql-tools</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">fileLoader</span> <span class="p">,</span> <span class="nx">mergeResolvers</span><span class="p">,</span><span class="nx">mergeTypes</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">merge-graphql-schemas</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>fileLoader : 인자로 경로를 받아 파일을 불러옵니다.<br />
path.join : 해당 경로의 파일들을 가져옴.<br />
makeExecutabelSchema : type, resolver를 schema 형태로 만들어 줌.</p>

<h3 id="3-schema를-서버에서-사용하기">3. schema를 서버에서 사용하기</h3>

<h4 id="서버에서-불러오기">서버에서 불러오기</h4>

<p>server.js에 다음을 추가합니다.</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">schema</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./schema</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="실행하기">실행하기</h4>

<p>server.js</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphQLServer</span><span class="p">({</span><span class="nx">schema</span><span class="p">});</span>
</code></pre></div></div>

<h3 id="4-packagejson-수정">4. package.json 수정</h3>

<ul>
  <li>main: index.js 제거</li>
  <li>yarn dev를 실행하면 nodemon –exec babel-node src/server.js를 실행하게 합니다</li>
</ul>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">  "scripts" : {
  "dev" : "nodemon --exec babel-node src/server.js"
  }
  </code></pre></figure>

<ul>
  <li>nodemon을 실행할 때마다 babel-node로 src폴더의 server.js 파일을 실행하게 됩니다.</li>
  <li>nodemon은 저장할 때마다 실행을 해주는 도구입니다. 서버를 껐다가 킬 필요가 없어지게 해주는 도구입니다.</li>
  <li>babel은 코드를 호환성 있게 만들어줍니다.</li>
  <li>.babelrc 파일을 만든뒤 node가 import를 인식할 수 있도록 아래와 같은 코드를 입력합니다.</li>
</ul>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">  {
  "presets": ["@babel/preset-env"]
  }
  </code></pre></figure>

<ul>
  <li>@babel/node와 @babel/preset-env, @babel/core를 설치하여 babel을 세팅합니다.</li>
</ul>

<h3 id="5-환경변수-설정하기">5. 환경변수 설정하기</h3>

<p>로컬서버를 사용하기위한 PORT와 같은 환경변수를 설정해주는 작업을 해야합니다. 이러한 환경변수들은 따로 .env파일을 통해 관리합니다.</p>

<ul>
  <li>.env파일을 src 폴더에 만든 뒤 설정할 포트 PORT = 4000을 선언합니다. 모든 환경변수들은 .env에 선언하는 것이 좋습니다.</li>
</ul>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">  PORT = 4000
  </code></pre></figure>

<ul>
  <li>server.js에서 PORT 변수를 만듭니다.</li>
</ul>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">  require("dotenv").config()

const PORT = process.env.PORT || 4000;</code></pre></figure>

<p>이때, .config()에서 아무것도 입력하지 않은 경우에는 .env 파일로 인식하여 실제 .env파일에는 아무내용도 입력하지 않는 것 같습니다.</p>

<h3 id="6-typedefs-resolvers-만들기">6. typeDefs, Resolvers 만들기</h3>

<p>서버를 만들기 위해서는 query를 생성해야하는데, query를 생성하기 위해서는 typeDefs과 Resolvers가 필요합니다.
그 Type과 Resolvers를 Server.js안에 우선 만들어보도록 하겠습니다.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">//typeDefs
const typeDefs = <span class="sb">`type Query{ hello : String! }`</span>
//resolvers
const resolvers = {
Query : {
hello : () =&gt; "hello"
}
}
const server = new GraphQLServer({typeDefs,resolvers});
server.start({port : PORT}, () =&gt; console.log(<span class="sb">`server is running http://localhost:${PORT}`</span>));</code></pre></figure>

<h3 id="7-마무리">7. 마무리</h3>

<p>yarn dev를 하면 server is running http://localhost:4000 라는 메시지가 뜨며 서버가 동작합니다.</p>

<h2 id="이슈">이슈</h2>

<p>Query를 찾을 수 없다고 하는 에러.<br />
server.js, schema.js파일은 api 밖에 있어야 한다.</p>
:ET